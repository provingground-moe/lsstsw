#!/bin/bash
#
# ********** DONT RUN THIS UNLESS YOU UNDERSTAND WHAT IT DOES ********
# **********             SERIOUS DAMAGE MAY OCCUR             ********
#
# Recursively build all product, starting with top-level ones listed in
# $PRODUCTS.
#
# The versiondb repository should be cloned from:
#
#   https://github.com/lsst/versiondb.git
#   git@github.com:lsst/versiondb.git
#
# For creation, use:
#
#     (mkdir versiondb; cd versiondb; git init; mkdir dep_db ver_db manifests)
#

set -e

DIR=$(cd "$(dirname "$0")"; pwd)
# shellcheck disable=SC1090
. "${DIR}/../etc/settings.cfg.sh"
# shellcheck disable=SC1090
. "${DIR}/deploy"

usage() { echo "Usage: $0 [-p] [-n] [-u] [-r <ref> [-r <ref2> [...]]] [-t <eupstag>] [product1 [product2 [...]]]" 1>&2; exit 1; }

# centos 6 shipped with bash 4.1; this is the best that can be done for
# returning a value prior to bash 4.3
versiondb_head() {
  (cd "$VERSIONDB" && git rev-parse HEAD)
}

save_build_env() {
  # saving environment information
  filename="${LSSTSW_BUILD_DIR}/${BUILD}.env"
  echo "Saving environment information in ${filename}"
  conda env export > /tmp/lenv
  cat /tmp/lenv | grep "^prefix" >> "${filename}"
  cat /tmp/lenv | grep -v "^prefix" > /tmp/lenv1
  if [[ "${LSST_CONDA_ENV_NAME}" != "lsst-scipipe" ]]; then
    ref="${LSST_CONDA_ENV_NAME:12}"
    if [[ $ref == *"."* ]]; then
      ref1=`echo "${ref}" | cut -f 1 -d .`
      ref2=`echo "${ref}" | cut -f 2 -d .`
      local_env_dir="${LSSTSW}/env/${ref1}/${ref2}"
    else
      local_env_dir="${LSSTSW}/env/${ref}"
    fi 
    if [ -d "${local_env_dir}" ]; then
      ref_file=`ls "${local_env_dir}"`
      local_env_file="${local_env_dir}/${ref_file}"
      echo "env_ref_file: ${local_env_file}" >> "${filename}"
      cat "${local_env_file}" | grep -v "^name" > /tmp/renv
      set +e  # disable set -e for the diff commands.
      diff -u /tmp/lenv1 /tmp/renv >> "${filename}"
      echo "Differences between active anvironment and reference environment"
      diff -u /tmp/lenv1 /tmp/renv
      set -e
    else
      echo "No environment file definition in ${local_env_dir}. Nothing recorded."
    fi
  fi
}

PREP_ONLY=false
NO_FETCH=false
UPDATE=false

while getopts ":pnur:t:" o; do
  case "$o" in
  p)
    PREP_ONLY=true
    ;;
  n)
    NO_FETCH=true
    ;;
  u)
    UPDATE=true
    ;;
  r)
    REF="$REF --ref $OPTARG"
    ;;
  t)
    TAG="$OPTARG"
    ;;
  *)
    usage
    ;;
  esac
done
shift $((OPTIND-1))

if [[ "$#" != "0" ]]; then
  PRODUCTS=("$@")
fi

(
  # shellcheck disable=SC1091
  source activate "$LSST_CONDA_ENV_NAME"

  # true if `lsst-build prepare` has run successfully
  PREPARED=false

  #
  # Add 128 to non-zero exit statuses if the `lsst-build prepare` subcommand has
  # completed.  This is to allow consumer scripts to be able to determine if a
  # failure in this script occurred before or after the prepare step.
  #
  cleanup() {
    local rv=$?

    [[ $rv == 0 ]] && exit
    [[ $PREPARED == true ]] && [[ $rv -lt 128 ]] && rv=$((rv + 128))

    exit $rv
  }

  trap cleanup EXIT

  flock-fd 200 || { echo "a rebuild is already in process." 1>&2; exit 1; }
  #
  # update repos.yaml file
  #
  if [[ $UPDATE == true ]]; then
    config_curl
    fetch_repos.yaml 'master'
  fi

  #
  # Prepare build
  #
  if [[ $VERSIONDB_PUSH == true ]]; then
    # do not pull from remote unless configured to push
    (cd "$VERSIONDB" && git pull --quiet)
    VERSIONDB_HEAD_PREBUILD=$(versiondb_head)
  fi

  ARGS=()
  if [[ $NO_FETCH == true ]]; then
    ARGS+=("--no-fetch")
  fi
  ARGS+=("--repos=${REPOSFILE}")
  ARGS+=("--exclusion-map=${EXCLUSIONS}")
  ARGS+=("--version-git-repo=${VERSIONDB}")
  ARGS+=("$LSSTSW_BUILD_DIR")
  if [[ ! -z "$REF" ]]; then
    IFS=" " read -r -a refs <<< "$REF"
    ARGS+=("${refs[@]}")
  fi
  ARGS+=("${PRODUCTS[@]}")

  lsst-build prepare "${ARGS[@]}"

  if [[ $VERSIONDB_PUSH == true ]]; then
    # do not push unless the head ref has changed
    [[ "$VERSIONDB_HEAD_PREBUILD" != $(versiondb_head) ]] &&
      (cd "$VERSIONDB" && git push && git push --tags)
  fi

  eval "$(grep -E '^BUILD=' "$LSSTSW_BUILD_DIR"/manifest.txt)"
  echo "# BUILD ID: $BUILD"

  save_build_env

  if [[ $PREP_ONLY == true ]]; then
    exit
  fi

  PREPARED=true

  #
  # HACK: Speed up the build by assuming EUPS caches are up-to-date
  # Make sure they really are first.
  #
  _EUPS_ASSUME_CACHES_UP_TO_DATE=0 python -c "import eups; eups.Eups()"
  export _EUPS_ASSUME_CACHES_UP_TO_DATE=1

  #
  # Execute build
  #
  lsst-build build "$LSSTSW_BUILD_DIR"

  #
  # Tag as requested
  #
  if [[ ! -z $TAG ]]; then
    eups-copy-tag "$BUILD" "$TAG"
  fi

  echo "# BUILD $BUILD completed."
) 200>"$DIR/../var/run/rebuild.run"

# vim: tabstop=2 shiftwidth=2 expandtab
